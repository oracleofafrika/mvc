const User = require('../model/userSchema');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const cron = require('node-cron');


const SignUp = async (req, res) => {
    try {
        const {userName, password, email} = req.body;

        const existingUser = await User.findOne({ email: email});

        if (existingUser) {
            return res.status(400).json({ message: 'Email already exists'});
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const user = new User({
            userName: userName,
            password: hashedPassword,
            email: email
        });

        await user.save();

        const transporter  = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.MAIL,
                pass: process.env.MAIL_PASS,
            },
        });

         // Define the email options
         const mailOPtions = {
             from: process.env.MAIL,
             to: `${user.email}`,
             subject: 'Hello from OSF',
             text: `Hello ${user.userName}, Thank you for signing up with us.`,
         };

        // Sending reminder email every 5 minutes

         cron.schedule('5 * * * *', () => {
             console.log('Sending reminder email every 5 minutes');
            
         });

        // Send the email
        transporter.sendMail(mailOPtions, (error, info) => {
            if(error) {
                console.log('Error occured:', error); 
            } else {
                console.log('Email  sent', info.response);
                
            }
        })
        res.status(201).json({message: 'User saved successfully'})
    } catch (error) {
        console.log(error);
        
        return res.status(500).json({message:'internal server error'});
        
    }
}

const logIn = async (req, res) => {
    try {
        const {email, password} = req.body;

        const isUser = await User.findOne({email:email});
         

        if (!isUser){
            return res.status(404).json({message: 'User should signup first'});
        }

        const userMatch = await bcrypt.compare(password, isUser.password)

        if(!userMatch){
            return res.status(401).json({message: 'Invalid credientials'});
        }

        // const userInfo = {
        //     email: User.email,
        //     password: User.password
        // }

        const payload = { 
            id: isUser._id,
            password: isUser.password
        }

        const token = jwt.sign(payload, process.env.JWT_USER_SECRET, {expiresIn: '1h'});

        return res.status(200).json({message:'successful login', token: token});
    } catch (error) {
        console.log(error);
        
        return res.status(500).json({message:'internal server error'});
        
    }
}

const AllUsers = async (req, res) => {
    try {
        const user = await User.find({})

        return res.status(200).json({message: 'these are the users', user});
    } catch (error) {
        console.log();

        return res.status(500).json({message: "error"});
        
    }
}

module.exports = { SignUp, logIn, AllUsers }